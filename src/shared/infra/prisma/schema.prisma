generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Budget {
  id        String   @id @default(uuid())
  amount    Float    @db.DoublePrecision
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String   @db.VarChar(36)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("budgets")
}

model Phone {
  id        String   @default(uuid())
  phone     String   @db.VarChar(16)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(36)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, userId])

  @@map("phones")
}

enum ReadinessLevel {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
}

model Project {
  id             String          @id @default(uuid())
  name           String          @unique @db.VarChar(50)
  description    String?         @db.VarChar(100)
  readinessLevel ReadinessLevel  @unique @default(ONE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgets        Budget[]
  users          UserProject[]

  @@map("projects")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(30)
  description String?  @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("roles")
}

model Session {
  id           String   @id @default(uuid())
  expiresDate  DateTime @db.Date
  refreshToken String   @unique @db.VarChar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.VarChar(36)
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model User {
  id            String          @id @default(uuid())
  firstName     String          @db.VarChar(20)
  lastName      String          @db.VarChar(50)
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar
  dateOfBirth   DateTime        @db.Date
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  roleId        String          @db.VarChar(36)
  supervisorId  String?         @db.VarChar(36)
  phones        Phone[]
  sessions      Session[]
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisor    User?           @relation("usersTousers", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervised    User[]          @relation("usersTousers")
  projects      UserProject[]

  @@map("users")
}

model UserProject {
  hoursAllocated Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.VarChar(36)
  projectId      String   @db.VarChar(36)
  project        Project? @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, projectId])

  @@map("usersprojects")
}
